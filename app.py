# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12cQRMPsukAziIrgW5rX75PZR-lgdmMar
"""

import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import tempfile
import os

def preprocess_image(img, target_size=(64, 64)):
    img = img.convert('L')  # Convert to grayscale
    img = img.resize(target_size, Image.Resampling.LANCZOS)
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0  # Normalize the image
    return img_array

def generate_and_display_image(generator, img_array):
    try:
        generated_image = generator.predict(img_array)
        
        fig, ax = plt.subplots(figsize=(6, 6))
        ax.imshow(np.squeeze(generated_image), cmap='gray')
        ax.set_title("Generated Image")
        ax.axis('off')
        return fig
    except Exception as e:
        st.error(f"Error generating image: {str(e)}")
        return None

def main():
    st.title("Image Generator App")

    model_file = st.file_uploader("Upload your generator model (.h5 file)", type=["h5"])

    if model_file is not None:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.h5') as tmp_file:
            tmp_file.write(model_file.getvalue())
            tmp_file_path = tmp_file.name

        try:
            generator = load_model(tmp_file_path)
            st.success("Generator model loaded successfully!")

            image_file = st.file_uploader("Choose an image to transform", type=["jpg", "jpeg", "png"])

            if image_file is not None:
                image = Image.open(image_file)
                st.image(image, caption='Uploaded Image', use_column_width=True)

                img_array = preprocess_image(image)

                if st.button('Generate Image'):
                    with st.spinner('Generating image...'):
                        fig = generate_and_display_image(generator, img_array)
                        if fig:
                            st.pyplot(fig)
        except Exception as e:
            st.error(f"Error loading or using the model: {str(e)}")
        finally:
            os.unlink(tmp_file_path)
    else:
        st.info("Please upload your generator model (.h5 file) to start.")

if __name__ == "__main__":
    main()